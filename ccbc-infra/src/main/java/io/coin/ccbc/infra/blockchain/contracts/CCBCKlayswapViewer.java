package io.coin.ccbc.infra.blockchain.contracts;

import com.klaytn.caver.Caver;
import com.klaytn.caver.crypto.KlayCredentials;
import com.klaytn.caver.tx.SmartContract;
import com.klaytn.caver.tx.manager.TransactionManager;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated smart contract code.
 * <p><strong>Do not modify!</strong>
 */
public class CCBCKlayswapViewer extends SmartContract {
    private static final String BINARY = "";

    public static final String FUNC_GETAIRDROPINTERESTS = "getAirdropInterests";

    public static final String FUNC_GETPOOLINTERESTS = "getPoolInterests";

    public static final String FUNC_GETPOOLINFOS = "getPoolInfos";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("8217", "0x8143EA845e3dedc68EED2Cdf66Ad5a0d5A771273");
    }

    protected CCBCKlayswapViewer(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    protected CCBCKlayswapViewer(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> getAirdropInterests(String _poolAddress, String walletAddress) {
        final Function function = new Function(FUNC_GETAIRDROPINTERESTS, 
                Arrays.<Type>asList(new Address(_poolAddress),
                new Address(walletAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>> getPoolInterests(List<String> _poolAddresses, String walletAddress) {
        final Function function = new Function(FUNC_GETPOOLINTERESTS, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_poolAddresses, Address.class)),
                new Address(walletAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple7<List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple7<List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple7<List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint256>) results.get(3).getValue()), 
                                convertToNative((List<Address>) results.get(4).getValue()), 
                                convertToNative((List<Uint256>) results.get(5).getValue()), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple7<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>>> getPoolInfos(List<String> _poolAddresses) {
        final Function function = new Function(FUNC_GETPOOLINFOS, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_poolAddresses, Address.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple7<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>>>(
                new Callable<Tuple7<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple7<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint256>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()), 
                                convertToNative((List<Address>) results.get(5).getValue()), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public static CCBCKlayswapViewer load(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        return new CCBCKlayswapViewer(contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    public static CCBCKlayswapViewer load(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CCBCKlayswapViewer(contractAddress, caver, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CCBCKlayswapViewer> deploy(Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CCBCKlayswapViewer.class, caver, credentials, chainId, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<CCBCKlayswapViewer> deploy(Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CCBCKlayswapViewer.class, caver, transactionManager, contractGasProvider, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
