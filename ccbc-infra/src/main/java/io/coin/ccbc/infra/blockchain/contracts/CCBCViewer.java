package io.coin.ccbc.infra.blockchain.contracts;

import com.klaytn.caver.Caver;
import com.klaytn.caver.crypto.KlayCredentials;
import com.klaytn.caver.tx.SmartContract;
import com.klaytn.caver.tx.manager.TransactionManager;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated smart contract code.
 * <p><strong>Do not modify!</strong>
 */
public class CCBCViewer extends SmartContract {

  public static final String FUNC_GETCOINBALANCES = "getCoinBalances";
  public static final String FUNC_GETKLAYSWAPPOOLLPBALANCES = "getKlaySwapPoolLpBalances";
  public static final String FUNC_GETPOOLINFOS = "getPoolInfos";
  public static final String FUNC_ESTIMATE = "estimate";
  public static final String FUNC_GETADDRSLICE = "getAddrSlice";
  protected static final HashMap<String, String> _addresses;
  private static final String BINARY = "";

  static {
    _addresses = new HashMap<String, String>();
    _addresses.put("8217", "0xac51A0874591B45d27092C5C4f44776C5D33FB11");
  }

  protected CCBCViewer(String contractAddress, Caver caver, KlayCredentials credentials,
      int chainId, ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, caver, credentials, chainId, contractGasProvider);
  }

  protected CCBCViewer(String contractAddress, Caver caver, TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, caver, transactionManager, contractGasProvider);
  }

  public static CCBCViewer load(String contractAddress, Caver caver, KlayCredentials credentials,
      int chainId, ContractGasProvider contractGasProvider) {
    return new CCBCViewer(contractAddress, caver, credentials, chainId, contractGasProvider);
  }

  public static CCBCViewer load(String contractAddress, Caver caver,
      TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
    return new CCBCViewer(contractAddress, caver, transactionManager, contractGasProvider);
  }

  public static RemoteCall<CCBCViewer> deploy(Caver caver, KlayCredentials credentials, int chainId,
      ContractGasProvider contractGasProvider) {
    return deployRemoteCall(CCBCViewer.class, caver, credentials, chainId, contractGasProvider,
        BINARY, "");
  }

  public static RemoteCall<CCBCViewer> deploy(Caver caver, TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    return deployRemoteCall(CCBCViewer.class, caver, transactionManager, contractGasProvider,
        BINARY, "");
  }

  public static String getPreviouslyDeployedAddress(String networkId) {
    return _addresses.get(networkId);
  }

  public RemoteCall<Tuple2<List<String>, List<BigInteger>>> getCoinBalances(
      List<String> _coinAddresses, String _walletAddress) {
    final Function function = new Function(FUNC_GETCOINBALANCES,
        Arrays.<Type>asList(new DynamicArray<Address>(
                Address.class,
                org.web3j.abi.Utils.typeMap(_coinAddresses, Address.class)),
            new Address(_walletAddress)),
        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }));
    return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
        new Callable<Tuple2<List<String>, List<BigInteger>>>() {
          @Override
          public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
            List<Type> results = CCBCViewer.this.executeCallMultipleValueReturn(function);
            return new Tuple2<List<String>, List<BigInteger>>(
                convertToNative((List<Address>) results.get(0).getValue()),
                convertToNative((List<Uint256>) results.get(1).getValue()));
          }
        });
  }

  public RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> getKlaySwapPoolLpBalances(
      List<String> poolAddresses, String walletAddress) {
    final Function function = new Function(FUNC_GETKLAYSWAPPOOLLPBALANCES,
        Arrays.<Type>asList(new DynamicArray<Address>(
                Address.class,
                org.web3j.abi.Utils.typeMap(poolAddresses, Address.class)),
            new Address(walletAddress)),
        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }));
    return new RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(
        new Callable<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
          @Override
          public Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call()
              throws Exception {
            List<Type> results = CCBCViewer.this.executeCallMultipleValueReturn(function);
            return new Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                convertToNative((List<Address>) results.get(0).getValue()),
                convertToNative((List<Uint256>) results.get(1).getValue()),
                convertToNative((List<Uint256>) results.get(2).getValue()),
                convertToNative((List<Uint256>) results.get(3).getValue()),
                convertToNative((List<Uint256>) results.get(4).getValue()),
                convertToNative((List<Uint256>) results.get(5).getValue()));
          }
        });
  }

  public RemoteCall<Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> getPoolInfos(
      List<String> poolAddresses) {
    final Function function = new Function(FUNC_GETPOOLINFOS,
        Arrays.<Type>asList(new DynamicArray<Address>(
            Address.class,
            org.web3j.abi.Utils.typeMap(poolAddresses, Address.class))),
        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }, new TypeReference<DynamicArray<Uint256>>() {
        }));
    return new RemoteCall<Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(
        new Callable<Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
          @Override
          public Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call()
              throws Exception {
            List<Type> results = CCBCViewer.this.executeCallMultipleValueReturn(function);
            return new Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                convertToNative((List<Address>) results.get(0).getValue()),
                convertToNative((List<Uint256>) results.get(1).getValue()),
                convertToNative((List<Uint256>) results.get(2).getValue()),
                convertToNative((List<Uint256>) results.get(3).getValue()),
                convertToNative((List<Uint256>) results.get(4).getValue()));
          }
        });
  }

  public RemoteCall<BigInteger> estimate(BigInteger _amountIn, List<String> _tokenAddrs,
      List<BigInteger> dexIdxs) {
    final Function function = new Function(FUNC_ESTIMATE,
        Arrays.<Type>asList(new Uint256(_amountIn),
            new DynamicArray<Address>(
                Address.class,
                org.web3j.abi.Utils.typeMap(_tokenAddrs, Address.class)),
            new DynamicArray<Uint256>(
                Uint256.class,
                org.web3j.abi.Utils.typeMap(dexIdxs, Uint256.class))),
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
    return this.executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public RemoteCall<List> getAddrSlice(BigInteger idx1, BigInteger idx2, List<String> addrs) {
    final Function function = new Function(FUNC_GETADDRSLICE,
        Arrays.<Type>asList(new Uint256(idx1),
            new Uint256(idx2),
            new DynamicArray<Address>(
                Address.class,
                org.web3j.abi.Utils.typeMap(addrs, Address.class))),
        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
        }));
    return new RemoteCall<List>(
        new Callable<List>() {
          @Override
          @SuppressWarnings("unchecked")
          public List call() throws Exception {
            List<Type> result = (List<Type>) CCBCViewer.this
                .executeCallSingleValueReturn(function, List.class);
            return convertToNative(result);
          }
        });
  }

  protected String getStaticDeployedAddress(String networkId) {
    return _addresses.get(networkId);
  }
}
