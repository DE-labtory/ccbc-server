package io.coin.ccbc.infra.blockchain.contracts;

import com.klaytn.caver.Caver;
import com.klaytn.caver.crypto.KlayCredentials;
import com.klaytn.caver.tx.SmartContract;
import com.klaytn.caver.tx.manager.TransactionManager;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated smart contract code.
 * <p><strong>Do not modify!</strong>
 */
public class CCBCDefinixViewer extends SmartContract {
    private static final String BINARY = "0x6080604052732afc6d4babcdfba8fad56f7d25c9f930e9c093ad6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506201d14f60015534801561006b57600080fd5b50611b138061007b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631e7cb3821461005157806336322a591461008657806387c31a95146100ba578063f9a98dba146100ea575b600080fd5b61006b60048036038101906100669190611662565b61011f565b60405161007d969594939291906118dd565b60405180910390f35b6100a0600480360381019061009b91906116f5565b6103de565b6040516100b195949392919061188a565b60405180910390f35b6100d460048036038101906100cf91906115bc565b610a5e565b6040516100e19190611968565b60405180910390f35b61010460048036038101906100ff919061160e565b610c1a565b604051610116969594939291906118dd565b60405180910390f35b606080606080606080869450865167ffffffffffffffff8111801561014357600080fd5b506040519080825280602002602001820160405280156101725781602001602082028036833780820191505090505b509550865167ffffffffffffffff8111801561018d57600080fd5b506040519080825280602002602001820160405280156101bc5781602001602082028036833780820191505090505b509350865167ffffffffffffffff811180156101d757600080fd5b506040519080825280602002602001820160405280156102065781602001602082028036833780820191505090505b509250865167ffffffffffffffff8111801561022157600080fd5b506040519080825280602002602001820160405280156102505781602001602082028036833780820191505090505b509150865167ffffffffffffffff8111801561026b57600080fd5b5060405190808252806020026020018201604052801561029a5781602001602082028036833780820191505090505b50905060005b87518110156103d45760008060008060006102cd8d87815181106102c057fe5b60200260200101516103de565b94509450945094509450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156103165750505050506103c7565b848c878151811061032357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838a878151811061036a57fe5b6020026020010181815250508289878151811061038357fe5b6020026020010181815250508188878151811061039c57fe5b602002602001018181525050808787815181106103b557fe5b60200260200101818152505050505050505b80806001019150506102a0565b5091939550919395565b60008060008060006103ee61139b565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631526fe27886040518263ffffffff1660e01b81526004016104479190611968565b60806040518083038186803b15801561045f57600080fd5b505afa158015610473573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049791906116a3565b90506000816000015190508073ffffffffffffffffffffffffffffffffffffffff166370a08231732afc6d4babcdfba8fad56f7d25c9f930e9c093ad6040518263ffffffff1660e01b81526004016104ef919061186f565b60206040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f919061171e565b95508160000151965060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638aa285506040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ae57600080fd5b505afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e6919061171e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561064c57600080fd5b505afa158015610660573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610684919061171e565b836020015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dfaabd5d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ef57600080fd5b505afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610727919061171e565b028161072f57fe5b040292508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561077957600080fd5b505afa15801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b1919061171e565b868273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906115e5565b73ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b8152600401610868919061186f565b60206040518083038186803b15801561088057600080fd5b505afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b8919061171e565b02816108c057fe5b0494508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561090957600080fd5b505afa15801561091d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610941919061171e565b868273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561098857600080fd5b505afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c091906115e5565b73ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016109f8919061186f565b60206040518083038186803b158015610a1057600080fd5b505afa158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a48919061171e565b0281610a5057fe5b049350505091939590929450565b600080600090505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b158015610acc57600080fd5b505afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b04919061171e565b811015610c0e57610b1361139b565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631526fe27836040518263ffffffff1660e01b8152600401610b6c9190611968565b60806040518083038186803b158015610b8457600080fd5b505afa158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc91906116a3565b90508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415610c00578192505050610c15565b508080600101915050610a66565b5060015490505b919050565b60608060608060608060008890506060610c3389611235565b9050805167ffffffffffffffff81118015610c4d57600080fd5b50604051908082528060200260200182016040528015610c7c5781602001602082028036833780820191505090505b509750805167ffffffffffffffff81118015610c9757600080fd5b50604051908082528060200260200182016040528015610cc65781602001602082028036833780820191505090505b509650805167ffffffffffffffff81118015610ce157600080fd5b50604051908082528060200260200182016040528015610d105781602001602082028036833780820191505090505b509550805167ffffffffffffffff81118015610d2b57600080fd5b50604051908082528060200260200182016040528015610d5a5781602001602082028036833780820191505090505b509450805167ffffffffffffffff81118015610d7557600080fd5b50604051908082528060200260200182016040528015610da45781602001602082028036833780820191505090505b509350805167ffffffffffffffff81118015610dbf57600080fd5b50604051908082528060200260200182016040528015610dee5781602001602082028036833780820191505090505b50925060005b81518110156112285760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393f1a40b848481518110610e4857fe5b602002602001015160200151866040518363ffffffff1660e01b8152600401610e72929190611983565b604080518083038186803b158015610e8957600080fd5b505afa158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec191906116cc565b6000015190506000811415610ed6575061121b565b610ede6113d9565b838381518110610eea57fe5b6020026020010151905080600001518b8481518110610f0557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393f1a40b8260200151876040518363ffffffff1660e01b8152600401610f9e929190611983565b604080518083038186803b158015610fb557600080fd5b505afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed91906116cc565b600001518a8481518110610ffd57fe5b60200260200101818152505080604001518a848151811061101a57fe5b60200260200101518260600151028161102f57fe5b0489848151811061103c57fe5b60200260200101818152505080604001518a848151811061105957fe5b60200260200101518260800151028161106e57fe5b0488848151811061107b57fe5b60200260200101818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166312aab7608260200151876040518363ffffffff1660e01b81526004016110e6929190611983565b60206040518083038186803b1580156110fe57600080fd5b505afa158015611112573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611136919061171e565b87848151811061114257fe5b60200260200101818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393f1a40b8260200151876040518363ffffffff1660e01b81526004016111ad929190611983565b604080518083038186803b1580156111c457600080fd5b505afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc91906116cc565b6020015186848151811061120c57fe5b60200260200101818152505050505b8080600101915050610df4565b5050509295509295509295565b60608060608060608060606112498861011f565b955095509550955095509550875167ffffffffffffffff8111801561126d57600080fd5b506040519080825280602002602001820160405280156112a757816020015b6112946113d9565b81526020019060019003908161128c5790505b50965060005b885181101561138f576040518060c001604052808883815181106112cd57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018783815181106112fc57fe5b6020026020010151815260200186838151811061131557fe5b6020026020010151815260200185838151811061132e57fe5b6020026020010151815260200184838151811061134757fe5b6020026020010151815260200183838151811061136057fe5b602002602001015181525088828151811061137757fe5b602002602001018190525080806001019150506112ad565b50505050505050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008135905061143481611aaf565b92915050565b60008151905061144981611aaf565b92915050565b600082601f83011261146057600080fd5b813561147361146e826119d9565b6119ac565b9150818183526020840193506020810190508385602084028201111561149857600080fd5b60005b838110156114c857816114ae8882611592565b84526020840193506020830192505060018101905061149b565b5050505092915050565b6000608082840312156114e457600080fd5b6114ee60806119ac565b905060006114fe8482850161143a565b6000830152506020611512848285016115a7565b6020830152506040611526848285016115a7565b604083015250606061153a848285016115a7565b60608301525092915050565b60006040828403121561155857600080fd5b61156260406119ac565b90506000611572848285016115a7565b6000830152506020611586848285016115a7565b60208301525092915050565b6000813590506115a181611ac6565b92915050565b6000815190506115b681611ac6565b92915050565b6000602082840312156115ce57600080fd5b60006115dc84828501611425565b91505092915050565b6000602082840312156115f757600080fd5b60006116058482850161143a565b91505092915050565b6000806040838503121561162157600080fd5b600061162f85828601611425565b925050602083013567ffffffffffffffff81111561164c57600080fd5b6116588582860161144f565b9150509250929050565b60006020828403121561167457600080fd5b600082013567ffffffffffffffff81111561168e57600080fd5b61169a8482850161144f565b91505092915050565b6000608082840312156116b557600080fd5b60006116c3848285016114d2565b91505092915050565b6000604082840312156116de57600080fd5b60006116ec84828501611546565b91505092915050565b60006020828403121561170757600080fd5b600061171584828501611592565b91505092915050565b60006020828403121561173057600080fd5b600061173e848285016115a7565b91505092915050565b60006117538383611777565b60208301905092915050565b600061176b8383611851565b60208301905092915050565b61178081611a73565b82525050565b61178f81611a73565b82525050565b60006117a082611a21565b6117aa8185611a51565b93506117b583611a01565b8060005b838110156117e65781516117cd8882611747565b97506117d883611a37565b9250506001810190506117b9565b5085935050505092915050565b60006117fe82611a2c565b6118088185611a62565b935061181383611a11565b8060005b8381101561184457815161182b888261175f565b975061183683611a44565b925050600181019050611817565b5085935050505092915050565b61185a81611aa5565b82525050565b61186981611aa5565b82525050565b60006020820190506118846000830184611786565b92915050565b600060a08201905061189f6000830188611786565b6118ac6020830187611860565b6118b96040830186611860565b6118c66060830185611860565b6118d36080830184611860565b9695505050505050565b600060c08201905081810360008301526118f78189611795565b9050818103602083015261190b81886117f3565b9050818103604083015261191f81876117f3565b9050818103606083015261193381866117f3565b9050818103608083015261194781856117f3565b905081810360a083015261195b81846117f3565b9050979650505050505050565b600060208201905061197d6000830184611860565b92915050565b60006040820190506119986000830185611860565b6119a56020830184611786565b9392505050565b6000604051905081810181811067ffffffffffffffff821117156119cf57600080fd5b8060405250919050565b600067ffffffffffffffff8211156119f057600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611a7e82611a85565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611ab881611a73565b8114611ac357600080fd5b50565b611acf81611aa5565b8114611ada57600080fd5b5056fea26469706673582212207257c92ab9d0944967f629417a6dfcb9e062a232be2ce7273d6b08a6aeb445e364736f6c634300060c0033";

    public static final String FUNC_GETFARMPID = "getFarmPid";

    public static final String FUNC_GETFARMINFOS = "getFarmInfos";

    public static final String FUNC_GETWALLETFARMINFOS = "getWalletFarmInfos";

    public static final String FUNC_GETALLFARMINFOS = "getAllFarmInfos";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("8217", "0x7Adccbc1121f2C837257e9888D0175fEbf45F88D");
    }

    protected CCBCDefinixViewer(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    protected CCBCDefinixViewer(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, caver, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> getFarmPid(String _farmAddress) {
        final Function function = new Function(FUNC_GETFARMPID, 
                Arrays.<Type>asList(new Address(_farmAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>> getFarmInfos(BigInteger pid) {
        final Function function = new Function(FUNC_GETFARMINFOS, 
                Arrays.<Type>asList(new Uint256(pid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> getWalletFarmInfos(String walletAddress, List<BigInteger> pids) {
        final Function function = new Function(FUNC_GETWALLETFARMINFOS, 
                Arrays.<Type>asList(new Address(walletAddress),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(pids, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint256>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()), 
                                convertToNative((List<Uint256>) results.get(5).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> getAllFarmInfos(List<BigInteger> ipids) {
        final Function function = new Function(FUNC_GETALLFARMINFOS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ipids, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint256>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()), 
                                convertToNative((List<Uint256>) results.get(5).getValue()));
                    }
                });
    }

    public static CCBCDefinixViewer load(String contractAddress, Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        return new CCBCDefinixViewer(contractAddress, caver, credentials, chainId, contractGasProvider);
    }

    public static CCBCDefinixViewer load(String contractAddress, Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CCBCDefinixViewer(contractAddress, caver, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CCBCDefinixViewer> deploy(Caver caver, KlayCredentials credentials, int chainId, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CCBCDefinixViewer.class, caver, credentials, chainId, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<CCBCDefinixViewer> deploy(Caver caver, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CCBCDefinixViewer.class, caver, transactionManager, contractGasProvider, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
